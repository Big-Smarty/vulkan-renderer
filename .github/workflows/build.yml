name: Build
on: push

env:
  inexor_build_type: "Release"
  inexor_vulkan_version: "1.2.189.0"
  inexor_vulkan_sdk: "$GITHUB_WORKSPACE/../vulkan_sdk/"

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container: ubuntu:rolling
    env:
      DEBIAN_FRONTEND: "noninteractive"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang",
            compiler: "clang",
            cc: "clang-14", cxx: "clang++-14",
            build_type: "Release",
          }
          - {
            name: "Ubuntu GCC",
            compiler: "gcc",
            cc: "gcc", cxx: "g++",
            build_type: "Release",
          }

    steps:
      - name: Update environment
        shell: bash
        run: |
          # Update package lists
          apt update -qq
          # Install build tools
          apt install -y \
            clang-14 \
            cmake \
            curl \
            git \
            libgl1-mesa-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-dri3-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            lld \
            ninja-build \
            pkg-config \
            python3 \
            python3-pip \
            xkb-data \
            xorg-dev

          pip3 install wheel setuptools

      - name: Install Vulkan SDK
        shell: bash
        run: |
          # Download Vulkan SDK
          curl -LS -o vulkansdk.tar.gz \
            https://sdk.lunarg.com/sdk/download/${{ env.inexor_vulkan_version }}/linux/vulkansdk-linux-x86_64-${{ env.inexor_vulkan_version }}.tar.gz
          # Create Vulkan SDK directory and extract
          mkdir "${{ env.inexor_vulkan_sdk }}"
          tar xfz vulkansdk.tar.gz -C "${{ env.inexor_vulkan_sdk }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure CMake
        shell: bash
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          export VULKAN_SDK="${{ env.inexor_vulkan_sdk }}/${{ env.inexor_vulkan_version }}/x86_64"
          export PATH=$VULKAN_SDK/bin:$PATH
          export LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH
          export VK_LAYER_PATH=$VULKAN_SDK/etc/explicit_layer.d
          # Configure cmake
          cmake . \
            -Bbuild \
            -DCMAKE_BUILD_TYPE=${{ env.inexor_build_type }} \
            -DINEXOR_USE_VMA_RECORDING=OFF \
            -GNinja \
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: bash
        run: |
          cmake --build build

      - name: Prepare build artifacts
        shell: bash
        run: |
          cd build
          tar -zcvf "../build_linux_${{ matrix.config.compiler }}.tar.xz" *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_linux_${{ matrix.config.compiler }}.tar.xz
          path: build_linux_${{ matrix.config.compiler }}.tar.xz

      - name: Prepare release artifacts
        shell: bash
        run: |
          mkdir release
          cp ./build/example/inexor-vulkan-renderer-example release/
          cp -r ./configuration/ release/
          cp -r ./assets/ release
          mkdir -p ./release/shaders
          cp ./shaders/*.spv ./release/shaders/
          cd release
          tar -zcvf "../release_linux_amd64_${{ matrix.config.compiler }}.tar.xz" *

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release_linux_amd64_${{ matrix.config.compiler }}.tar.xz
          path: release_linux_amd64_${{ matrix.config.compiler }}.tar.xz
          retention-days: 7

  windows:
    name: ${{ matrix.config.name }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows MSVC",
            compiler: "msvc",
            cc: "cl", cxx: "cl",
            build_type: "Release",
            cmake_configure_options: '-G "Visual Studio 17 2022" -A x64',
          }
          - {
            name: "Windows Clang",
            compiler: "clang",
            cc: "clang-cl", cxx: "clang-cl",
            build_type: "Release",
            cmake_configure_options: '-G "Visual Studio 17 2022" -A x64 -T "LLVM_v143" -DCMAKE_CXX_COMPILER="clang-cl.exe" -DCMAKE_C_COMPILER="clang-cl.exe" -DCMAKE_LINKER="lld.exe"',
          }

    steps:
      - name: Update environment
        shell: pwsh
        run: |
          pip3 install wheel setuptools

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure LLVM
        if: matrix.config.compiler == 'clang'
        shell: pwsh
        run: |
          choco upgrade --no-progress llvm
          curl -fsSL -o "LLVM_VS2017.zip" "https://github.com/zufuliu/llvm-utils/releases/download/v23.03/LLVM_VS2017.zip"
          7z x -y "LLVM_VS2017.zip" >NUL
          LLVM_VS2017\install.bat

      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          curl -LS -o vulkansdk.exe `
            https://sdk.lunarg.com/sdk/download/${{ env.inexor_vulkan_version }}/windows/VulkanSDK-${{ env.inexor_vulkan_version }}-Installer.exe?Human=true
          7z x vulkansdk.exe -o"${{ env.inexor_vulkan_sdk }}"

      - name: Configure CMake
        shell: pwsh
        run: |
          $env:CC="${{ matrix.config.cc }}"
          $env:CXX="${{ matrix.config.cxx }}"
          $env:Path += ";${{ env.inexor_vulkan_sdk }}\;${{ env.inexor_vulkan_sdk }}\Bin\"
          # Configure CMake
          cmake . `
            -Bbuild `
            -DCMAKE_BUILD_TYPE=${{ env.inexor_build_type }} `
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: pwsh
        run: |
          cmake --build build --config ${{ matrix.config.build_type }}

      - name: Prepare build artifacts
        shell: pwsh
        run: |
          7z a -tzip "build_windows_${{ matrix.config.compiler }}.zip" ./build/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_windows_${{ matrix.config.compiler }}.zip
          path: build_windows_${{ matrix.config.compiler }}.zip

      - name: Prepare release artifacts
        shell: pwsh
        run: |
          mkdir release
          cp ./build/example/Release/. release/
          cp -r ./configuration/. release
          cp -r ./assets/. release
          mkdir -P ./release/shaders
          cp ./shaders/*.spv ./release/shaders/
          7z a -tzip "release_windows_amd64_${{ matrix.config.compiler }}.zip" ./release/*

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release_windows_amd64_${{ matrix.config.compiler }}.zip
          path: release_windows_amd64_${{ matrix.config.compiler }}.zip
          retention-days: 7
