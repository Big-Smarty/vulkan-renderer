name: CMake Build
on: [push, pull_request]

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    env:
      build_type: "Release"
      conan_path: "$HOME/.local/bin"
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
      vulkan_version: "1.2.131.1"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang",
            artifact: "linux-clang.tar.xz",
            cc: "clang", cxx: "clang++",
            cmake_configure_options: '-DCMAKE_EXE_LINKER_FLAGS="-v -fuse-ld=lld"',
          }
          - {
            name: "Ubuntu GCC",
            artifact: "linux-gcc.tar.xz",
            cc: "gcc", cxx: "g++",
          }

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Update environment
        shell: bash
        run: |
          # Update package lists
          sudo apt update -qq

          # Install build tools
          sudo apt install -y \
            clang-tidy \
            cmake \
            lld \
            ninja-build

          pip3 install wheel setuptools
          pip3 install conan mako

      - name: Install Vulkan SDK
        shell: bash
        run: |
          # Download Vulkan SDK
          curl -LS -o vulkansdk.tar.gz \
            https://sdk.lunarg.com/sdk/download/${{ env.vulkan_version }}/linux/vulkansdk-linux-x86_64-${{ env.vulkan_version }}.tar.gz

          # Create Vulkan SDK directory and extract
          mkdir "${{ env.vulkan_sdk }}"
          tar xfz vulkansdk.tar.gz -C "${{ env.vulkan_sdk }}"

      - name: Configure CMake
        shell: bash
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          export PATH="${{ env.conan_path }}":$PATH
          export VULKAN_SDK="${{ env.vulkan_sdk }}/${{ env.vulkan_version }}/x86_64"
          export PATH=$VULKAN_SDK/bin:$PATH
          export LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH
          export VK_LAYER_PATH=$VULKAN_SDK/etc/explicit_layer.d

          # Setup conan
          # Note: libstdc++11 is needed to use new libc++ ABI
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default

          # Configure cmake
          cmake . \
            -Bbuild \
            -DCMAKE_BUILD_TYPE=${{ env.build_type }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DINEXOR_USE_VMA_RECORDING=OFF \
            -GNinja \
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: bash
        run: |
          cmake --build build

      - name: Analyze
        if: matrix.name == 'Ubuntu Clang'
        shell: bash
        run: |
          clang-tidy -dump-config
          clang-tidy -p ./build/ ./src/*.cpp ./example/*.cpp ./tests/*.cpp ./benchmarks/*.cpp

      - name: Prepare upload
        run: |
          tar cfz ${{ matrix.config.artifact }} build

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  windows:
    name: ${{ matrix.config.name }}
    runs-on: windows-latest
    env:
      build_type: "Release"
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
      vulkan_version: "1.2.131.1"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows MSVC",
            artifact: "windows-msvc.zip",
            cc: "cl", cxx: "cl",
            cmake_build_options: "--config Release",
            cmake_configure_options: '-G "Visual Studio 16 2019" -A x64',
            conan_profile_update: 'conan profile update settings.compiler="Visual Studio" default; conan profile update settings.compiler.version=16 default',
          }
          - {
            name: "Windows MinGW",
            artifact: "windows-mingw.zip",
            cc: "gcc", cxx: "g++",
            cmake_configure_options: '-GNinja',
            conan_profile_update: 'conan profile update settings.compiler.libcxx=libstdc++11 default',
          }

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Update environment
        shell: pwsh
        run: |
          pip3 install wheel setuptools
          pip3 install conan
          choco install ninja

      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          curl -LS -o vulkansdk.exe `
            https://vulkan.lunarg.com/sdk/download/${{ env.vulkan_version }}/windows/VulkanSDK-${{ env.vulkan_version }}-Installer.exe?Human=true

          7z x vulkansdk.exe -o"${{ env.vulkan_sdk }}"

      - name: Configure CMake
        shell: pwsh
        run: |
          $env:CC="${{ matrix.config.cc }}"
          $env:CXX="${{ matrix.config.cxx }}"
          $env:Path += ";${{ env.vulkan_sdk }}\;${{ env.vulkan_sdk }}\Bin\"

          # Setup conan
          conan profile new default --detect --force
          ${{ matrix.config.conan_profile_update }}

          # Configure CMake
          cmake . `
            -Bbuild `
            -DCMAKE_BUILD_TYPE=${{ env.build_type }} `
            ${{ matrix.config.cmake_configure_options }}

      - name: Build
        shell: pwsh
        run: |
          cmake --build build ${{ matrix.config.cmake_build_options }}

      - name: Prepare upload
        shell: pwsh
        run: |
          7z a -tzip ${{ matrix.config.artifact }} build/*

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}
