os: linux
language: cpp
python: "3.7"
dist: xenial
compiler:
  - gcc
before_script:
  # create a build folder for the out-of-source build
  - mkdir build
  # switch to build directory
  - cd build
  # run cmake; here we assume that the project's
  # top-level CMakeLists.txt is located at '..'
  - cmake ..
install:
# Install conan
  - pip install conan
# Automatic detection of your arch, compiler, etc.
  - conan user
script:
# once CMake has done its job we just build using make as usual
  - make
# if the project uses ctest we can run the tests like this
  - make test





language: cpp
sudo: required
os: linux
dist: trusty

branches:
  only:
    - master

compiler:
  - clang
  - gcc

before_script:
  - sudo apt-get install
  - pip install conan
  # glfw needs to come from bincrafters.
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
  - conan install conanfile.py
  - mkdir build
  - cd build
  - cmake ..

install:
  - wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha11/premake-5.0.0-alpha11-linux.tar.gz?Human=true -O premake-5.0.0-alpha11-linux.tar.gz
  - tar -xzvf premake-5.0.0-alpha11-linux.tar.gz
  - sudo apt-get -qq update
  - sudo apt-get install -y libassimp-dev libglm-dev graphviz libxcb-dri3-0 libxcb-present0 libpciaccess0 cmake libpng-dev libxcb-dri3-dev libx11-dev libx11-xcb-dev libmirclient-dev libwayland-dev libxrandr-dev
  - export VK_VERSION=1.2.131.1
  - wget -O vulkansdk-linux-x86_64-$VK_VERSION.tar.gz https://sdk.lunarg.com/sdk/download/$VK_VERSION/linux/vulkansdk-linux-x86_64-$VK_VERSION.tar.gz
  - tar zxf vulkansdk-linux-x86_64-$VK_VERSION.tar.gz
  - export VULKAN_SDK=$TRAVIS_BUILD_DIR/$VK_VERSION/x86_64

script:
  - make config=debug_linux-x64
  - cd ..

notifications:
  email:
    recipients:
      - info@inexor.org
    on_success: change
    on_failure: always
