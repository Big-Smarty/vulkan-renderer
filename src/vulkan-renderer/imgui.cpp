#include "inexor/vulkan-renderer/imgui.hpp"

#include "inexor/vulkan-renderer/wrapper/cpu_texture.hpp"
#include "inexor/vulkan-renderer/wrapper/make_info.hpp"

#include <cassert>
#include <stdexcept>
#include <utility>

namespace inexor::vulkan_renderer {

ImGUIOverlay::ImGUIOverlay(const wrapper::Device &device, RenderGraph *render_graph, TextureResource *back_buffer,
                           std::function<void()> on_update_user_data)
    : m_device(device), m_vertex_shader(m_device, VK_SHADER_STAGE_VERTEX_BIT, "ImGUI", "shaders/ui.vert.spv"),
      m_fragment_shader(m_device, VK_SHADER_STAGE_FRAGMENT_BIT, "ImGUI", "shaders/ui.frag.spv"),
      m_on_update_user_data(std::move(on_update_user_data)) {

    initialize_imgui();
    set_imgui_style();
    load_font_texture();

    m_vertex_buffer = render_graph->add<BufferResource>("ImGui", BufferUsage::VERTEX_BUFFER, [&]() {
        // Update the user ImGui data
        m_on_update_user_data();

        const ImDrawData *draw_data = ImGui::GetDrawData();
        if (draw_data == nullptr || draw_data->TotalIdxCount == 0 || draw_data->TotalVtxCount == 0) {
            // Prevent reading from nullpointer and creating buffers of size 0, because both would throw an
            // exception
            return;
        }

        m_index_data.clear();
        m_vertex_data.clear();

        // We need to collect the vertices and indices generated by ImGui
        // because it does not store them in one array, but rather in chunks (command lists)
        for (std::size_t i = 0; i < draw_data->CmdListsCount; i++) {
            const ImDrawList *cmd_list = draw_data->CmdLists[i]; // NOLINT
            for (std::size_t j = 0; j < cmd_list->IdxBuffer.Size; j++) {
                m_index_data.push_back(cmd_list->IdxBuffer.Data[j]); // NOLINT
            }
            for (std::size_t j = 0; j < cmd_list->VtxBuffer.Size; j++) {
                m_vertex_data.push_back(cmd_list->VtxBuffer.Data[j]); // NOLINT
            }
        }
        m_vertex_buffer->announce_update(m_vertex_data);
        m_index_buffer->announce_update(m_index_data);
    });

    // Note that the index buffer updates is merged into the vertex buffer update for simplicity
    m_index_buffer = render_graph->add<BufferResource>("ImGui", BufferUsage::INDEX_BUFFER);

    // This is required for creating a descriptor for a resource that is not (yet) inside of rendergraph
    imgui_texture = std::make_unique<ExternalTextureResource>(*m_imgui_texture);

    m_stage = render_graph->add<GraphicsStage>("ImGui");
    m_stage->add_shader(m_vertex_shader)
        ->add_shader(m_fragment_shader)
        ->add_color_blend_attachment({
            .blendEnable = VK_TRUE,
            .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
            .dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
            .colorBlendOp = VK_BLEND_OP_ADD,
            .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
            .dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO,
            .alphaBlendOp = VK_BLEND_OP_ADD,
            .colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT |
                              VK_COLOR_COMPONENT_A_BIT,
        })
        ->set_vertex_input_attribute_descriptions({
            {
                .location = 0,
                .format = VK_FORMAT_R32G32_SFLOAT,
                .offset = offsetof(ImDrawVert, pos),
            },
            {
                .location = 1,
                .format = VK_FORMAT_R32G32_SFLOAT,
                .offset = offsetof(ImDrawVert, uv),
            },
            {
                .location = 2,
                .format = VK_FORMAT_R8G8B8A8_UNORM,
                .offset = offsetof(ImDrawVert, col),
            },
        })
        ->set_vertex_input_binding_descriptions<ImDrawVert>()
        ->writes_to(back_buffer)
        ->reads_from(m_index_buffer)
        ->reads_from(m_vertex_buffer)
        ->reads_from(imgui_texture.get(), VK_SHADER_STAGE_FRAGMENT_BIT)
        ->set_on_record([&](const wrapper::CommandBuffer &cmd_buf) {
            ImDrawData *draw_data = ImGui::GetDrawData();
            if (draw_data == nullptr) {
                return;
            }

            std::uint32_t index_offset = 0;
            std::int32_t vertex_offset = 0;
            for (std::size_t i = 0; i < draw_data->CmdListsCount; i++) {
                const ImDrawList *cmd_list = draw_data->CmdLists[i]; // NOLINT
                for (std::int32_t j = 0; j < cmd_list->CmdBuffer.Size; j++) {
                    const ImDrawCmd &draw_cmd = cmd_list->CmdBuffer[j];
                    cmd_buf.draw_indexed(draw_cmd.ElemCount, 1, index_offset, vertex_offset);
                    index_offset += draw_cmd.ElemCount;
                }
                vertex_offset += cmd_list->VtxBuffer.Size;
            }
        })
        ->add_push_constant_range(&m_push_const_block, [&]() {
            const ImGuiIO &io = ImGui::GetIO();
            m_push_const_block.scale = glm::vec2(2.0f / io.DisplaySize.x, 2.0f / io.DisplaySize.y);
        });
}

void ImGUIOverlay::initialize_imgui() {
    spdlog::trace("Creating ImGUI context");
    ImGui::CreateContext();
}

void ImGUIOverlay::load_font_texture() {
    ImGuiIO &io = ImGui::GetIO();
    io.FontGlobalScale = 1.0f;

    // TODO: Move this data into a container class; have container class also support bold and italic.
    constexpr const char *FONT_FILE_PATH = "assets/fonts/NotoSans-Bold.ttf";
    constexpr float FONT_SIZE = 18.0f;

    spdlog::trace("Loading front {}", FONT_FILE_PATH);

    ImFont *font = io.Fonts->AddFontFromFileTTF(FONT_FILE_PATH, FONT_SIZE);

    unsigned char *font_texture_data{};
    int font_texture_width{0};
    int font_texture_height{0};
    io.Fonts->GetTexDataAsRGBA32(&font_texture_data, &font_texture_width, &font_texture_height);

    if (font == nullptr || font_texture_data == nullptr) {
        spdlog::error("Unable to load font {}.  Falling back to error texture", FONT_FILE_PATH);
        m_imgui_texture = std::make_unique<wrapper::GpuTexture>(m_device, wrapper::CpuTexture());
    } else {
        spdlog::trace("Creating ImGUI font texture");

        // Our font textures always have 4 channels and a single mip level by definition.
        constexpr int FONT_TEXTURE_CHANNELS{4};
        constexpr int FONT_MIP_LEVELS{1};

        VkDeviceSize upload_size = static_cast<VkDeviceSize>(font_texture_width) *
                                   static_cast<VkDeviceSize>(font_texture_height) *
                                   static_cast<VkDeviceSize>(FONT_TEXTURE_CHANNELS);

        m_imgui_texture = std::make_unique<wrapper::GpuTexture>(
            m_device, font_texture_data, upload_size, font_texture_width, font_texture_height, FONT_TEXTURE_CHANNELS,
            FONT_MIP_LEVELS, "ImGUI font texture");
    }
}

void ImGUIOverlay::set_imgui_style() {
    ImGuiStyle &style = ImGui::GetStyle();
    style.Colors[ImGuiCol_TitleBg] = ImVec4(1.0f, 0.0f, 0.0f, 1.0f);
    style.Colors[ImGuiCol_TitleBgActive] = ImVec4(1.0f, 0.0f, 0.0f, 1.0f);
    style.Colors[ImGuiCol_TitleBgCollapsed] = ImVec4(1.0f, 0.0f, 0.0f, 0.1f);
    style.Colors[ImGuiCol_MenuBarBg] = ImVec4(1.0f, 0.0f, 0.0f, 0.4f);
    style.Colors[ImGuiCol_Header] = ImVec4(0.8f, 0.0f, 0.0f, 0.4f);
    style.Colors[ImGuiCol_HeaderActive] = ImVec4(1.0f, 0.0f, 0.0f, 0.4f);
    style.Colors[ImGuiCol_HeaderHovered] = ImVec4(1.0f, 0.0f, 0.0f, 0.4f);
    style.Colors[ImGuiCol_FrameBg] = ImVec4(0.0f, 0.0f, 0.0f, 0.8f);
    style.Colors[ImGuiCol_CheckMark] = ImVec4(1.0f, 0.0f, 0.0f, 0.8f);
    style.Colors[ImGuiCol_SliderGrab] = ImVec4(1.0f, 0.0f, 0.0f, 0.4f);
    style.Colors[ImGuiCol_SliderGrabActive] = ImVec4(1.0f, 0.0f, 0.0f, 0.8f);
    style.Colors[ImGuiCol_FrameBgHovered] = ImVec4(1.0f, 1.0f, 1.0f, 0.1f);
    style.Colors[ImGuiCol_FrameBgActive] = ImVec4(1.0f, 1.0f, 1.0f, 0.2f);
    style.Colors[ImGuiCol_Button] = ImVec4(1.0f, 0.0f, 0.0f, 0.4f);
    style.Colors[ImGuiCol_ButtonHovered] = ImVec4(1.0f, 0.0f, 0.0f, 0.6f);
    style.Colors[ImGuiCol_ButtonActive] = ImVec4(1.0f, 0.0f, 0.0f, 0.8f);
}

ImGUIOverlay::~ImGUIOverlay() {
    ImGui::DestroyContext();
}

} // namespace inexor::vulkan_renderer
